<template>
  <a-modal
    :title="title"
    :width="modalWidth"
    :visible="visible"
    :confirmLoading="confirmLoading"
    :maskClosable="false"
    @cancel="handleCancel"
  >
    <a-form-model
      ref="form"
      :model="form"
      :rules="rules"
      :label-col="labelCol"
      :wrapper-col="wrapperCol"
    >
      <a-form-model-item label="主键" prop="id" hidden="true" >
        <a-input v-model="form.id" :disabled="showable"/>
      </a-form-model-item>
      #foreach ($column in $columns)
        <a-form-model-item
          label="$column.comments"
          prop="$column.name"
        >
          <a-input v-model="form.$column.name" :disabled="showable"/>
        </a-form-model-item>
      #end
    </a-form-model>

    <template v-slot:footer>
      <a-button key="cancel" @click="handleCancel">取消</a-button>
      <a-button v-if="!showable" key="forward" :loading="confirmLoading" type="primary" @click="handleOk">保存</a-button>
    </template>
  </a-modal>
</template>

<script>
  import { FormMixin } from '@/mixins/FormMixin'
  import { get, add, update } from '@/api/${module}/${classname}'
  export default {
    name: '${className}Edit',
    mixins: [FormMixin],
    data () {
      return {
        form: {
          id: null,
        #foreach ($column in $columns)
          $column.name: null,
        #end
        },
        rules: {

        }
      }
    },
    methods: {
      edit (id, type) {
        if (['edit', 'show'].includes(type)) {
          this.confirmLoading = true
          get(id).then(res => {
            this.form = res.data
            this.confirmLoading = false
          })
        } else {
          this.confirmLoading = false
        }
      },
      handleOk () {
        this.#[[$]]#refs.form.validate(async valid => {
          if (valid) {
            this.confirmLoading = true
            if (this.type === 'add') {
              await add(this.form)
            } else if (this.type === 'edit') {
              await update(this.form)
            }
            setTimeout(() => {
              this.confirmLoading = false
              this.#[[$]]#emit('ok')
              this.visible = false
            }, 200)
          } else {
            return false
          }
        })
      },
      resetForm () {
        this.#[[$]]#nextTick(() => {
          this.#[[$]]#refs.form.resetFields()
        })
      }
    }
  }
</script>

<style scoped>

</style>
