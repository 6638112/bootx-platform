{"author":"xxm","version":"1.2.4","userSecure":"","currTypeMapperGroupName":"Default","currTemplateGroupName":"Default","currColumnConfigGroupName":"Default","currGlobalConfigGroupName":"Default","typeMapper":{"Default":{"name":"Default","elementList":[{"matchType":"REGEX","columnType":"varchar(\\(\\d+\\))?","javaType":"java.lang.String"},{"matchType":"REGEX","columnType":"char(\\(\\d+\\))?","javaType":"java.lang.String"},{"matchType":"REGEX","columnType":"(tiny|medium|long)*text","javaType":"java.lang.String"},{"matchType":"REGEX","columnType":"decimal(\\(\\d+,\\d+\\))?","javaType":"java.math.BigDecimal"},{"matchType":"ORDINARY","columnType":"integer","javaType":"java.lang.Integer"},{"matchType":"REGEX","columnType":"(tiny|small|medium)*int(\\(\\d+\\))?","javaType":"java.lang.Integer"},{"matchType":"ORDINARY","columnType":"int4","javaType":"java.lang.Integer"},{"matchType":"ORDINARY","columnType":"int8","javaType":"java.lang.Long"},{"matchType":"REGEX","columnType":"bigint(\\(\\d+\\))?","javaType":"java.lang.Long"},{"matchType":"ORDINARY","columnType":"date","javaType":"java.time.LocalDate"},{"matchType":"ORDINARY","columnType":"datetime","javaType":"java.time.LocalDateTime"},{"matchType":"ORDINARY","columnType":"timestamp","javaType":"java.time.LocalDateTime"},{"matchType":"ORDINARY","columnType":"time","javaType":"java.time.LocalTime"},{"matchType":"ORDINARY","columnType":"boolean","javaType":"java.lang.Boolean"}]}},"template":{"Default":{"name":"Default","elementList":[{"name":"entity.java.vm","code":"##定义初始变量\n#set($tName = $!{tableInfo.name.substring(2)})\n\n##设置回调\n$!callback.setFileName($tool.append($tName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/entity\"))\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}entity;\n\n##自动导入包\nimport cn.bootx.common.core.function.EntityBaseFunction;\nimport cn.bootx.common.mybatisplus.base.MpBaseEntity;\nimport com.baomidou.mybatisplus.annotation.TableName;\nimport $!{tableInfo.savePackageName}.dto.$!{tName}Dto;\nimport $!{tableInfo.savePackageName}.param.$!{tName}Param;\nimport $!{tableInfo.savePackageName}.convert.$!{tName}Convert;\n\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport lombok.experimental.Accessors;\n\nimport java.time.LocalDateTime;\n\n/**\n * $!{tableInfo.comment}实体类\n * @author $!author\n * @date $!time.currTime()\n */\n@EqualsAndHashCode(callSuper = true)\n@Data\n@Accessors(chain = true)\n@TableName(\"$tool.hump2Underline($!{tableInfo.name})\")\npublic class $!{tName} extends MpBaseEntity implements EntityBaseFunction<$!{tName}Dto> {\n\n#foreach($column in $tableInfo.otherColumn)\n  #if(${column.comment})\n  /** ${column.comment} */\n  #end\n  private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n  \n#end\n    /** 创建对象 */\n    public static $!{tName} init($!{tName}Param in) {\n        return $!{tName}Convert.CONVERT.convert(in);\n    }\n    \n    /** 转换成dto */\n    @Override\n    public $!{tName}Dto toDto() {\n        return $!{tName}Convert.CONVERT.convert(this);\n    }\n}\n"},{"name":"dto.java.vm","code":"## 设置变量\n#set($tName = $!{tableInfo.name.substring(2)})\n#set($fileName = $tool.append($!{tName}, \"Dto\"))\n\n##设置回调\n$!callback.setFileName($tool.append($fileName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/dto\"))\n\n##包\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}dto;\n\n##自动导入包\nimport cn.bootx.common.core.rest.dto.BaseDto;\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\n\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport lombok.experimental.Accessors;\n\nimport java.io.Serializable;\nimport java.time.LocalDateTime;\n\n/**\n * $!{tableInfo.comment}dto\n * @author $!author\n * @date $!time.currTime()\n */\n@EqualsAndHashCode(callSuper = true)\n@Data\n@Accessors(chain = true)\n@ApiModel(value = \"$!{tableInfo.comment}\")\npublic class $!{fileName} extends BaseDto implements Serializable {\n    private static final long serialVersionUID = $!{tool.serial()};\n\n#foreach($column in $tableInfo.otherColumn)\n  #if(${column.comment})\n  @ApiModelProperty(\"${column.comment}\")\n  #end\n  private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n\n#end\n}\n"},{"name":"param.java.vm","code":"#set($tName = $!{tableInfo.name.substring(2)})\n#set($fileName = $tool.append($!{tName}, \"Param\"))\n\n##设置回调\n$!callback.setFileName($tool.append($fileName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/param\"))\n\n##包\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}param;\n\n##自动导入包\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\n\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\nimport java.time.LocalDateTime;\n\n/**\n * $!{tableInfo.comment}参数类\n * @author $!author\n * @date $!time.currTime()\n */\n@Data\n@Accessors(chain = true)\n@ApiModel(value = \"$!{tableInfo.comment}\")\npublic class $!{fileName} {\n\n#foreach($column in $tableInfo.fullColumn)\n  #if(${column.comment})\n  @ApiModelProperty(\"${column.comment}\")\n  #end\n  private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n\n#end\n}"},{"name":"convert.java.vm","code":"## 设置变量\n#set($tName = $!{tableInfo.name.substring(2)})\n#set($fileName = $tool.append($!{tName}, \"Convert\"))\n\n##设置回调\n$!callback.setFileName($tool.append($fileName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/convert\"))\n\n##包\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}convert;\n\n##自动导入包\nimport $!{tableInfo.savePackageName}.entity.$!{tName};\nimport $!{tableInfo.savePackageName}.dto.$!{tName}Dto;\nimport $!{tableInfo.savePackageName}.param.$!{tName}Param;\n\nimport org.mapstruct.Mapper;\nimport org.mapstruct.Mappings;\nimport org.mapstruct.factory.Mappers;\n\n/**\n * $!{tableInfo.comment}实体类转换\n * @author $!author\n * @date $!time.currTime()\n */\n@Mapper\npublic interface $!{fileName} {\n    $!{tName}Convert CONVERT = Mappers.getMapper($!{tName}Convert.class);\n\n    @Mappings({})\n    $!{tName} convert($!{tName}Param in);\n\n    @Mappings({})\n    $!{tName}Dto convert($!{tName} in);\n}"},{"name":"dao.java.vm","code":"##定义初始变量\n#set($tName = $!{tableInfo.name.substring(2)})\n#set($fileName = $tool.append($!{tName}, \"Mapper\"))\n\n##设置回调\n$!callback.setFileName($tool.append($fileName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/dao\"))\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}dao;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tName};\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport org.apache.ibatis.annotations.Mapper;\n\n/**\n * $!{tableInfo.comment}\n * @author $!author\n * @date $!time.currTime()\n */\n@Mapper\npublic interface $!{fileName} extends BaseMapper<$!{tName}> {\n\n}\n"},{"name":"manager.java.vm","code":"##定义初始变量\n#set($tName = $!{tableInfo.name.substring(2)})\n#set($fileName = $tool.append($!{tName}, \"Manager\"))\n\n##设置回调\n$!callback.setFileName($tool.append($fileName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/dao\"))\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}dao;\n\n##导包\nimport cn.bootx.common.core.rest.param.PageParam;\nimport cn.bootx.common.mybatisplus.base.MpBaseEntity;\nimport cn.bootx.common.mybatisplus.impl.BaseManager;\nimport cn.bootx.common.mybatisplus.util.MpUtils;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport $!{tableInfo.savePackageName}.entity.$!{tName};\nimport $!{tableInfo.savePackageName}.param.$!{tName}Param;\n\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Repository;\n\n/**\n * $!{tableInfo.comment}\n * @author $!author\n * @date $!time.currTime()\n */\n@Slf4j\n@Repository\n@RequiredArgsConstructor\npublic class $!{fileName} extends BaseManager<$!{tName}Mapper, $!{tName}>{\n    private final $!{tName}Mapper $tool.firstLowerCase($!{tName})Mapper;\n\n     /**\n     * 分页\n     */\n    public Page<$!{tName}> page(PageParam pageParam, $!{tName}Param param) {\n        Page<$!{tName}> mpPage = MpUtils.getMpPage(pageParam, $!{tName}.class);\n        return lambdaQuery().orderByDesc(MpBaseEntity::getId).page(mpPage);\n    }\n}"},{"name":"service.java.vm","code":"##定义初始变量\n#set($tName = $!{tableInfo.name.substring(2)})\n#set($fileName = $tool.append($!{tName}, \"Service\"))\n#set($tNameLower = $tool.firstLowerCase($!{tName}))\n\n##设置回调\n$!callback.setFileName($tool.append($fileName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service\"))\n\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;\n\nimport cn.bootx.common.core.exception.BizException;\nimport cn.bootx.common.core.rest.PageResult;\nimport cn.bootx.common.core.rest.param.PageParam;\nimport cn.bootx.common.core.util.ResultConvertUtils;\nimport cn.bootx.common.mybatisplus.util.MpUtils;\nimport cn.hutool.core.bean.BeanUtil;\nimport cn.hutool.core.bean.copier.CopyOptions;\nimport $!{tableInfo.savePackageName}.dao.$!{tName}Manager;\nimport $!{tableInfo.savePackageName}.dto.$!{tName}Dto;\nimport $!{tableInfo.savePackageName}.entity.$!{tName};\nimport $!{tableInfo.savePackageName}.param.$!{tName}Param;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n/**\n * $!{tableInfo.comment}\n * @author $!author\n * @date $!time.currTime()\n */\n@Slf4j\n@Service\n@RequiredArgsConstructor\npublic class $!{tName}Service {\n    private final $!{tName}Manager $!{tNameLower}Manager;\n\n    /**\n     * 添加\n     */\n    public void add($!{tName}Param param){\n        $!{tName} init = $!{tName}.init(param);\n        $!{tNameLower}Manager.save(init);\n    }\n\n    /**\n     * 更新\n     */\n    public void update($!{tName}Param param){\n        $!{tName} $!{tNameLower} = $!{tNameLower}Manager.findById(param.getId())\n                .orElseThrow(() -> new BizException(\"$!{tableInfo.comment}不存在\"));\n        BeanUtil.copyProperties(param,$!{tNameLower}, CopyOptions.create().ignoreNullValue());\n        $!{tNameLower}Manager.updateById($!{tNameLower});\n    }\n\n    /**\n     * 获取单条\n     */\n    public $!{tName}Dto findById(Long id){\n        return $!{tNameLower}Manager.findById(id)\n                .map($!{tName}::toDto)\n                .orElse(null);\n    }\n\n    /**\n     * 分页\n     */\n    public PageResult<$!{tName}Dto> page(PageParam pageParam, $!{tName}Param param){\n        return MpUtils.convert2PageResult($!{tNameLower}Manager.page(pageParam,param));\n    }\n\n    /**\n     * 删除\n     */\n    public void delete(Long id){\n        $!{tNameLower}Manager.deleteById(id);\n    }\n\n    /**\n     * 查询全部\n     */\n    public List<$!{tName}Dto> findAll(){\n        return ResultConvertUtils.dtoListConvert($!{tNameLower}Manager.findAll());\n    }\n\n}\n"},{"name":"controller.java.vm","code":"##定义初始变量\n#set($tName = $!{tableInfo.name.substring(2)})\n#set($fileName = $tool.append($!{tName}, \"Controller\"))\n#set($tNameLower = $tool.firstLowerCase($!{tName}))\n\n##设置回调\n$!callback.setFileName($tool.append($fileName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/\"))\n\npackage com.donger.dongcai.controller;\n\nimport cn.bootx.common.core.rest.PageResult;\nimport cn.bootx.common.core.rest.Res;\nimport cn.bootx.common.core.rest.ResResult;\nimport cn.bootx.common.core.rest.param.PageParam;\nimport $!{tableInfo.savePackageName}.service.$!{tName}Service;\nimport $!{tableInfo.savePackageName}.dto.$!{tName}Dto;\nimport $!{tableInfo.savePackageName}.param.$!{tName}Param;\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiOperation;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n/**   \n* @author $!author\n* @date $!time.currTime()\n*/\n@Tag(name =\"$!{tableInfo.comment}\")\n@RestController\n@RequestMapping(\"/$!{tNameLower}\")\n@RequiredArgsConstructor\npublic class $!{tName}Controller {\n    private final $!{tName}Service $!{tNameLower}Service;\n\n    @ApiOperation(value = \"添加\")\n    @PostMapping(value = \"/add\")\n    public ResResult<Void> add(@RequestBody $!{tName}Param param){\n        $!{tNameLower}Service.add(param);\n        return Res.ok();\n    }\n\n    @ApiOperation(value = \"修改\")\n    @PostMapping(value = \"/update\")\n    public ResResult<Void> update(@RequestBody $!{tName}Param param){\n        $!{tNameLower}Service.update(param);\n        return Res.ok();\n    }\n\n    @ApiOperation(value = \"删除终端\")\n    @DeleteMapping(value = \"/delete\")\n    public ResResult<Void> delete(Long id){\n        $!{tNameLower}Service.delete(id);\n        return Res.ok();\n    }\n\n    @ApiOperation(value = \"通过ID查询终端\")\n    @GetMapping(value = \"/findById\")\n    public ResResult<$!{tName}Dto> findById(Long id){\n        return Res.ok($!{tNameLower}Service.findById(id));\n    }\n\n    @ApiOperation(value = \"查询所有的终端\")\n    @GetMapping(value = \"/findAll\")\n    public ResResult<List<$!{tName}Dto>> findAll(){\n        return Res.ok($!{tNameLower}Service.findAll());\n    }\n\n    @ApiOperation(value = \"分页查询终端\")\n    @GetMapping(value = \"/page\")\n    public ResResult<PageResult<$!{tName}Dto>> page(PageParam pageParam, $!{tName}Param param){\n        return Res.ok($!{tNameLower}Service.page(pageParam,param));\n    }\n}\n\n"}]}},"columnConfig":{"Default":{"name":"Default","elementList":[{"title":"disable","type":"BOOLEAN","selectValue":""},{"title":"support","type":"SELECT","selectValue":"add,edit,query,del,ui"}]}},"globalConfig":{"Default":{"name":"Default","elementList":[{"name":"autoImport.vm","value":"##自动导入包（仅导入实体属性需要的包，通常用于实体类）\n#foreach($import in $importList)\nimport $!import;\n#end"},{"name":"define.vm","value":"##（Velocity宏定义）\n\n##定义设置表名后缀的宏定义，调用方式：#setTableSuffix(\"Test\")\n#macro(setTableSuffix $suffix)\n    #set($tableName = $!tool.append($tableInfo.name, $suffix))\n#end\n\n##定义设置包名后缀的宏定义，调用方式：#setPackageSuffix(\"Test\")\n#macro(setPackageSuffix $suffix)\n#if($suffix!=\"\")package #end#if($tableInfo.savePackageName!=\"\")$!{tableInfo.savePackageName}.#{end}$!suffix;\n#end\n\n##定义直接保存路径与文件名简化的宏定义，调用方式：#save(\"/entity\", \".java\")\n#macro(save $path $fileName)\n    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))\n    $!callback.setFileName($tool.append($tableInfo.name, $fileName))\n#end\n\n##定义表注释的宏定义，调用方式：#tableComment(\"注释信息\")\n#macro(tableComment $desc)\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})$desc\n *\n * @author $!author\n * @since $!time.currTime()\n */\n#end\n\n##定义GET，SET方法的宏定义，调用方式：#getSetMethod($column)\n#macro(getSetMethod $column)\n\n    public $!{tool.getClsNameByFullName($column.type)} get$!{tool.firstUpperCase($column.name)}() {\n        return $!{column.name};\n    }\n\n    public void set$!{tool.firstUpperCase($column.name)}($!{tool.getClsNameByFullName($column.type)} $!{column.name}) {\n        this.$!{column.name} = $!{column.name};\n    }\n#end"},{"name":"init.vm","value":"##初始化区域\n\n##去掉表的t_前缀\n$!tableInfo.setName($tool.getClassName($tableInfo.obj.name.replaceFirst(\"book_\",\"\")))\n\n##参考阿里巴巴开发手册，POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误\n#foreach($column in $tableInfo.fullColumn)\n#if($column.name.startsWith(\"is\") && $column.type.equals(\"java.lang.Boolean\"))\n    $!column.setName($tool.firstLowerCase($column.name.substring(2)))\n#end\n#end\n\n##实现动态排除列\n#set($temp = $tool.newHashSet(\"testCreateTime\", \"otherColumn\"))\n#foreach($item in $temp)\n    #set($newList = $tool.newArrayList())\n    #foreach($column in $tableInfo.fullColumn)\n        #if($column.name!=$item)\n            ##带有反回值的方法调用时使用$tool.call来消除返回值\n            $tool.call($newList.add($column))\n        #end\n    #end\n    ##重新保存\n    $tableInfo.setFullColumn($newList)\n#end\n\n##对importList进行篡改\n#set($temp = $tool.newHashSet())\n#foreach($column in $tableInfo.fullColumn)\n    #if(!$column.type.startsWith(\"java.lang.\"))\n        ##带有反回值的方法调用时使用$tool.call来消除返回值\n        $tool.call($temp.add($column.type))\n    #end\n#end\n##覆盖\n#set($importList = $temp)"},{"name":"mybatisSupport.vm","value":"##针对Mybatis 进行支持，主要用于生成xml文件\n#foreach($column in $tableInfo.fullColumn)\n    ##储存列类型\n    $tool.call($column.ext.put(\"sqlType\", $tool.getField($column.obj.dataType, \"typeName\")))\n    #if($tool.newHashSet(\"java.lang.String\").contains($column.type))\n        #set($jdbcType=\"VARCHAR\")\n    #elseif($tool.newHashSet(\"java.lang.Boolean\", \"boolean\").contains($column.type))\n        #set($jdbcType=\"BOOLEAN\")\n    #elseif($tool.newHashSet(\"java.lang.Byte\", \"byte\").contains($column.type))\n        #set($jdbcType=\"BYTE\")\n    #elseif($tool.newHashSet(\"java.lang.Integer\", \"int\", \"java.lang.Short\", \"short\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Long\", \"long\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Float\", \"float\", \"java.lang.Double\", \"double\").contains($column.type))\n        #set($jdbcType=\"NUMERIC\")\n    #elseif($tool.newHashSet(\"java.util.Date\", \"java.sql.Timestamp\", \"java.time.Instant\", \"java.time.LocalDateTime\", \"java.time.OffsetDateTime\", \"\tjava.time.ZonedDateTime\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #elseif($tool.newHashSet(\"java.sql.Date\", \"java.time.LocalDate\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #else\n        ##其他类型\n        #set($jdbcType=\"VARCHAR\")\n    #end\n    $tool.call($column.ext.put(\"jdbcType\", $jdbcType))\n#end\n\n##定义宏，查询所有列\n#macro(allSqlColumn)#foreach($column in $tableInfo.fullColumn)$column.obj.name#if($velocityHasNext), #end#end#end\n"}]}}}